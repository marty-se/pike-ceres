#include <ceres/ceres.h>
#include <vector>
#include <stack>
#include <sstream>

#include <thread>

extern "C" {
#include "global.h"
#include "module_support.h"
#include "program.h"
#include "interpret.h"
#include "builtin_functions.h"
#include "pike_threadlib.h"

DECLARATIONS
}

typedef int int32;
typedef unsigned int uint32;

enum NodeType {
  FUNCTION_NODE,
  OPERATOR_NODE,
  PARAMETER_NODE,
  SCALAR_NODE
};

enum FunctionType {
  OP_ABS,
  OP_LOG,
  OP_EXP,
  OP_SQRT,
  OP_COS,
  OP_ACOS,
  OP_SIN,
  OP_ASIN,
  OP_TAN,
  OP_ATAN,
  OP_SINH,
  OP_COSH,
  OP_TANH,
  OP_POW,
  OP_ATAN2
};

enum OperatorType {
  OP_ADD,
  OP_SUB,
  OP_MUL,
  OP_DIV,
#if 0
  OP_LT,
  OP_GT,
  OP_EQ
#endif
};

template <typename T>
struct ExprOp
{
  NodeType node_type;
  FunctionType func_type;
  OperatorType op_type;

  unsigned int param_block;
  unsigned int param_block_index;

  T value;
};

template <typename T>
class TreeNode
{
public:
  explicit TreeNode (T value) : value_(value)
  {
    node_type_ = SCALAR_NODE;
  }

  TreeNode (FunctionType func_type, TreeNode* child)
    : func_type_(func_type), left_child_(child)
  {
    node_type_ = FUNCTION_NODE;
    left_child_->AddRef();
  }

  TreeNode (FunctionType func_type, TreeNode* left_child, TreeNode* right_child)
    : func_type_(func_type), left_child_(left_child), right_child_(right_child)
  {
    node_type_ = FUNCTION_NODE;
    left_child_->AddRef();
    right_child_->AddRef();
  }

  TreeNode (OperatorType op_type, TreeNode* left_child, TreeNode* right_child)
    : op_type_(op_type), left_child_(left_child), right_child_(right_child)
  {
    node_type_ = OPERATOR_NODE;
    left_child_->AddRef();
    right_child_->AddRef();
  }

  TreeNode (int32 param_block, int32 param_block_index)
    : param_block_(param_block), param_block_index_(param_block_index)
  {
    node_type_ = PARAMETER_NODE;
  }

  ~TreeNode()
  {
    if (left_child_ != NULL)
      left_child_->SubRef();
    if (right_child_ != NULL)
      right_child_->SubRef();
  }

  std::string StringExpr()
  {
    std::ostringstream res;
    AddExprToStream (res);
    return res.str();
  }

  void AddExprToStream (std::ostringstream& res)
  {
    if (node_type_ == FUNCTION_NODE) {
      switch (func_type_) {
      case OP_ABS:
	res << "abs";
	break;
      case OP_LOG:
	res << "log";
	break;
      case OP_EXP:
	res << "exp";
	break;
      case OP_SQRT:
	res << "sqrt";
	break;
      case OP_COS:
	res << "cos";
	break;
      case OP_ACOS:
	res << "acos";
	break;
      case OP_SIN:
	res << "sin";
	break;
      case OP_ASIN:
	res << "asin";
	break;
      case OP_TAN:
	res << "tan";
	break;
      case OP_ATAN:
	res << "atan";
	break;
      case OP_SINH:
	res << "sinh";
	break;
      case OP_COSH:
	res << "cosh";
	break;
      case OP_TANH:
	res << "tanh";
	break;
      case OP_POW:
	res << "pow";
	break;
      case OP_ATAN2:
	res << "atan2";
	break;
      }
    }

    if (node_type_ == FUNCTION_NODE || node_type_ == OPERATOR_NODE)
      res << "(";

    if (left_child_ != NULL)
      left_child_->AddExprToStream (res);

    if (node_type_ == OPERATOR_NODE) {
      switch (op_type_) {
      case OP_ADD:
	res << " + ";
	break;
      case OP_SUB:
	res << " - ";
	break;
      case OP_MUL:
	res << " * ";
	break;
      case OP_DIV:
	res << " / ";
	break;
#if 0
      case OP_LT:
	res << " < ";
	break;
      case OP_GT:
	res << " > ";
	break;
      case OP_EQ:
	res << " == ";
	break;
#endif
      }
    }

    if (node_type_ == PARAMETER_NODE)
      res << "P(" << param_block_ << "," << param_block_index_ << ")";
    else if (node_type_ == SCALAR_NODE)
      res << value_;

    if (right_child_ != NULL)
      right_child_->AddExprToStream (res);

    if (node_type_ == FUNCTION_NODE || node_type_ == OPERATOR_NODE)
      res << ")";
  }

  void AddPostfixExpr (std::vector<ExprOp<T> >& postfix_expr,
		       const std::vector<int32>& block_sizes)
  {
    if (left_child_ != NULL)
      left_child_->AddPostfixExpr(postfix_expr, block_sizes);
    if (right_child_ != NULL)
      right_child_->AddPostfixExpr (postfix_expr, block_sizes);

    ExprOp<T> op = {};

    switch (node_type_) {
    case FUNCTION_NODE:
      op.node_type = FUNCTION_NODE;
      op.func_type = func_type_;
      postfix_expr.push_back (op);
      break;
    case OPERATOR_NODE:
      op.node_type = OPERATOR_NODE;
      op.op_type = op_type_;
      postfix_expr.push_back (op);
      break;
    case PARAMETER_NODE:
      op.node_type = PARAMETER_NODE;
      op.param_block = param_block_;
      op.param_block_index = param_block_index_;
      if (param_block_ >= block_sizes.size())
	throw std::out_of_range ("Param block out of range");

      if (param_block_index_ >= block_sizes.at (param_block_))
	throw std::out_of_range ("Param block sub-index out of range");

      postfix_expr.push_back (op);
      break;
    case SCALAR_NODE:
      op.node_type = SCALAR_NODE;
      op.value = value_;
      postfix_expr.push_back (op);
      break;
    }
  }

  template <typename TEval>
  TEval Evaluate (TEval const* const* param_blocks,
		  const std::vector<int32>& block_sizes)
  {
    if (!got_postfix_expr_) {
      //      std::cout << "RESIDUAL = " << StringExpr() << std::endl;
      AddPostfixExpr (postfix_expr_, block_sizes);
      got_postfix_expr_ = true;
    }

    std::stack<TEval> expr_stack;

    for (auto const &it : postfix_expr_) {
      switch (it.node_type) {
      case FUNCTION_NODE:
	ApplyFunction (it.func_type, expr_stack);
	break;
      case OPERATOR_NODE:
	ApplyOperator (it.op_type, expr_stack);
	break;
      case PARAMETER_NODE: {
	unsigned int pb = it.param_block;
	unsigned int pbi = it.param_block_index;
	expr_stack.push (param_blocks[pb][pbi]);
	break;
      }
      case SCALAR_NODE:
	expr_stack.push (TEval (it.value));
	break;
      default:
	throw;
      }
    }

    if (expr_stack.size() != 1) {
      if (expr_stack.size() < 1)
	throw std::underflow_error ("Expression stack underflow");
      else
	throw std::overflow_error ("Expression stack overflow");
    }

    return expr_stack.top();

#if 0
    switch (node_type_) {
    case FUNCTION_NODE:
      return EvalFunction (param_blocks, block_sizes);
    case OPERATOR_NODE:
      return EvalOperator (param_blocks, block_sizes);
    case PARAMETER_NODE:
      return EvalParameter (param_blocks, block_sizes);
    case SCALAR_NODE:
      return TEval (value_);
    }
#endif

    throw;
  }

  void AddRef()
  {
    refs_++;
  }

  void SubRef()
  {
    if (!--refs_)
      delete this;
  }

protected:

  template <typename TEval>
  static void ApplyFunction (const FunctionType func_type,
			     std::stack<TEval>& expr_stack)
  {
    TEval operand1 = expr_stack.top();
    expr_stack.pop();

    TEval operand2;
    TEval res;

    switch (func_type) {
    case OP_ABS:
      res = ceres::abs (operand1);
      break;
    case OP_LOG:
      res = ceres::log (operand1);
      break;
    case OP_EXP:
      res = ceres::exp (operand1);
      break;
    case OP_SQRT:
      res = ceres::sqrt (operand1);
      break;
    case OP_COS:
      res = ceres::cos (operand1);
      break;
    case OP_ACOS:
      res = ceres::acos (operand1);
      break;
    case OP_SIN:
      res = ceres::sin (operand1);
      break;
    case OP_ASIN:
      res = ceres::asin (operand1);
      break;
    case OP_TAN:
      res = ceres::tan (operand1);
      break;
    case OP_ATAN:
      res = ceres::atan (operand1);
      break;
    case OP_SINH:
      res = ceres::sinh (operand1);
      break;
    case OP_COSH:
      res = ceres::cosh (operand1);
      break;
    case OP_TANH:
      res = ceres::tanh (operand1);
      break;
    case OP_POW:
      operand2 = expr_stack.top();
      expr_stack.pop();
      res = ceres::pow (operand2, operand1);
      break;
    case OP_ATAN2:
      operand2 = expr_stack.top();
      expr_stack.pop();
      res = ceres::atan2 (operand2, operand1);
      break;
    default:
      throw std::invalid_argument ("Invalid function type in operand");
    }

    expr_stack.push (res);
  }

  template <typename TEval>
  static void ApplyOperator (const OperatorType op_type,
			     std::stack<TEval>& expr_stack)
  {
    TEval right_val = expr_stack.top();
    expr_stack.pop();
    TEval left_val = expr_stack.top();
    expr_stack.pop();

    TEval res;

    switch (op_type) {
    case OP_ADD:
      res = left_val + right_val;
      break;
    case OP_SUB:
      res = left_val - right_val;
      break;
    case OP_MUL:
      res = left_val * right_val;
      break;
    case OP_DIV:
      res = left_val / right_val;
      break;
#if 0
    case OP_LT:
      res = left_val < right_val;
      break;
    case OP_GT:
      res = left_val > right_val;
      break;
    case OP_EQ:
      res = left_val == right_val;
      break;
#endif
    default:
      throw std::invalid_argument ("Invalid operator type in operand");
    }

    expr_stack.push (res);
  }

  template <typename TEval>
  TEval EvalFunction (TEval const* const* param_blocks,
		      const std::vector<int32>& block_sizes)
  {
    TEval left_val = left_child_->Evaluate (param_blocks, block_sizes);

    TEval right_val;
    if (right_child_)
      right_val = right_child_->Evaluate (param_blocks, block_sizes);

    switch (func_type_) {
    case OP_ABS:
      return ceres::abs (left_val);
    case OP_LOG:
      return ceres::log (left_val);
    case OP_EXP:
      return ceres::exp (left_val);
    case OP_SQRT:
      return ceres::sqrt (left_val);
    case OP_COS:
      return ceres::cos (left_val);
    case OP_ACOS:
      return ceres::acos (left_val);
    case OP_SIN:
      return ceres::sin (left_val);
    case OP_ASIN:
      return ceres::asin (left_val);
    case OP_TAN:
      return ceres::tan (left_val);
    case OP_ATAN:
      return ceres::atan (left_val);
    case OP_SINH:
      return ceres::sinh (left_val);
    case OP_COSH:
      return ceres::cosh (left_val);
    case OP_TANH:
      return ceres::tanh (left_val);
    case OP_POW:
      return ceres::pow (left_val, right_val);
    case OP_ATAN2:
      return ceres::atan2 (left_val, right_val);
    }

    throw;
  }

  template <typename TEval>
  TEval EvalOperator (TEval const* const* param_blocks,
		      const std::vector<int32>& block_sizes)
  {
    TEval left_val = left_child_->Evaluate (param_blocks, block_sizes);
    TEval right_val = right_child_->Evaluate (param_blocks, block_sizes);

    switch (op_type_) {
    case OP_ADD:
      return left_val + right_val;
    case OP_SUB:
      return left_val - right_val;
    case OP_MUL:
      return left_val * right_val;
    case OP_DIV:
      return left_val / right_val;
#if 0
    case OP_LT:
      return left_val < right_val;
    case OP_GT:
      return left_val > right_val;
    case OP_EQ:
      return left_val == right_val;
#endif
    }

    throw;
  }

  template <typename TEval>
  TEval EvalParameter (TEval const* const* param_blocks,
		       const std::vector<int32>& block_sizes)
  {
    if (param_block_ >= block_sizes.size() ||
	param_block_index_ >= block_sizes.at (param_block_))
      throw;

    return param_blocks[param_block_][param_block_index_];
  }

  int refs_ = 0;

  bool got_postfix_expr_ = false;
  std::vector<ExprOp<T> > postfix_expr_;

  NodeType node_type_;
  FunctionType func_type_;
  OperatorType op_type_;

  TreeNode* left_child_ = NULL;
  TreeNode* right_child_ = NULL;

  unsigned int param_block_;
  unsigned int param_block_index_;

  T value_;
};

typedef TreeNode<double> DoubleTreeNode;

static const int kStride = 10;

template <typename T>
void worker (T const* const* param_blocks, T* residuals,
	     const std::vector<int32> block_sizes,
	     const std::vector<DoubleTreeNode*> expr_trees,
	     int thread_no, int threads_tot)
{
  for (int i = 0; i < expr_trees.size(); i++) {
    if ((i-thread_no) % threads_tot) continue;

    DoubleTreeNode* tree = expr_trees.at (i);

    if (tree == NULL)
      Pike_error ("Uninitialized residual.\n");

    residuals[i] = tree->Evaluate (param_blocks, block_sizes);
  }
}

/* FIXME: Allow runtime configuration. */
#define NUM_THREADS 2

struct PikeCostFunctor {
public:
  typedef ceres::DynamicAutoDiffCostFunction<PikeCostFunctor, kStride>
  PikeDynamicCostFunction;

  PikeCostFunctor (const std::vector<int32> block_sizes,
		   const std::vector<DoubleTreeNode*> expr_trees) :
    block_sizes_(block_sizes),
    expr_trees_(expr_trees)
  {  }

  template <typename T>
  bool operator()(T const* const* param_blocks, T* residuals) const
  {
    std::vector<std::thread*> my_threads;

    for (int i = 0; i < NUM_THREADS; i++) {
      std::thread* t =
	new std::thread (worker<T>, param_blocks, residuals, block_sizes_,
			 expr_trees_, i, NUM_THREADS);
      my_threads.push_back (t);
    }

    for (int i = 0; i < my_threads.size(); i++) {
      std::thread* t = my_threads.at (i);
      t->join();
      delete t;
    }

    return true;
  }

  static PikeDynamicCostFunction*
  Create (const std::vector<int32>& block_sizes,
	  const std::vector<DoubleTreeNode*>& expr_trees)
  {
    PikeCostFunctor* functor =
      new PikeCostFunctor (block_sizes, expr_trees);
    PikeDynamicCostFunction* cost_function =
      new PikeDynamicCostFunction (functor);

    for (auto const &it : block_sizes) {
      cost_function->AddParameterBlock (it);
    }
    cost_function->SetNumResiduals (expr_trees.size());
    return cost_function;
  }

private:
  const std::vector<int32> block_sizes_;
  const std::vector<DoubleTreeNode*> expr_trees_;
};

PIKECLASS Operand {
  CVAR DoubleTreeNode* expr_node;
  CVAR int param_block;
  CVAR int param_block_index;

  DoubleTreeNode* build_tree_from_svalues
    (OperatorType op_type,
     const std::vector<struct svalue*> &svals)
  {
    DoubleTreeNode* root = NULL;
    for (auto *it : svals) {
      struct svalue* op_sval = it;
      DoubleTreeNode *new_node = NULL;
      if (TYPEOF (*op_sval) == T_OBJECT &&
	  op_sval->u.object->prog == Ceres_Operand_program) {
	struct object* op = op_sval->u.object;
	struct Ceres_Operand_struct* op_struct =
	  (Ceres_Operand_struct*)get_storage (op, Ceres_Operand_program);
	new_node = op_struct->expr_node;
	if (new_node == NULL) {
	  new_node = new DoubleTreeNode (op_struct->param_block,
					 op_struct->param_block_index);
	}
      } else if (TYPEOF (*op_sval) == T_FLOAT) {
	new_node = new DoubleTreeNode (op_sval->u.float_number);
      } else if (TYPEOF (*op_sval) == T_INT) {
	new_node = new DoubleTreeNode (op_sval->u.integer);
      } else {
	throw;
      }

      if (root != NULL) {
	root = new DoubleTreeNode (op_type, root, new_node);
      } else {
	root = new_node;
      }
    }

    return root;
  }

  enum OpSide { OP_LEFT, OP_RIGHT };

  void handle_op (INT32 args,
		  OperatorType op_type,
		  OpSide op_side)
  {
    struct object* new_operand = fast_clone_object (Ceres_Operand_program);
    struct Ceres_Operand_struct* new_op_struct =
      (Ceres_Operand_struct*)get_storage (new_operand, Ceres_Operand_program);

    struct svalue my_svalue;
    SET_SVAL (my_svalue, T_OBJECT, 0, object, Pike_fp->current_object);

    std::vector<struct svalue*> svalues;

    if (op_side == OP_LEFT)
      svalues.push_back (&my_svalue);

    for (int i = 0; i < args; i++) {
      struct svalue op = Pike_sp[i-args];
      if (!((TYPEOF (op) == T_OBJECT &&
	     op.u.object->prog == Ceres_Operand_program) ||
	    TYPEOF (op) == T_INT ||
	    TYPEOF (op) == T_FLOAT)) {
	SIMPLE_BAD_ARG_ERROR("<operator>",i+1,"int|float|Ceres.Operand");
      }

      svalues.push_back (Pike_sp+i-args);
    }

    if (op_side == OP_RIGHT)
      svalues.push_back (&my_svalue);

    new_op_struct->expr_node = build_tree_from_svalues (op_type, svalues);
    new_op_struct->expr_node->AddRef();

    pop_n_elems (args);
    push_object (new_operand);
  }

  PIKEFUN object `+(mixed ... ops)
  { handle_op (args, OP_ADD, OP_LEFT); }
  PIKEFUN object ``+(mixed ... ops)
  { handle_op (args, OP_ADD, OP_RIGHT); }

  PIKEFUN object `-(mixed ... ops)
  { handle_op (args, OP_SUB, OP_LEFT); }
  PIKEFUN object ``-(mixed ... ops)
  { handle_op (args, OP_SUB, OP_RIGHT); }

  PIKEFUN object `*(mixed ... ops)
  { handle_op (args, OP_MUL, OP_LEFT); }
  PIKEFUN object ``*(mixed ... ops)
  { handle_op (args, OP_MUL, OP_RIGHT); }

  PIKEFUN object `/(mixed ... ops)
  { handle_op (args, OP_DIV, OP_LEFT); }
  PIKEFUN object ``/(mixed ... ops)
  { handle_op (args, OP_DIV, OP_RIGHT); }

#if 0
  PIKEFUN object `<(mixed ... ops)
  { handle_op (args, OP_LT, OP_LEFT); }
  PIKEFUN object ``<(mixed ... ops)
  { handle_op (args, OP_LT, OP_RIGHT); }

  PIKEFUN object `>(mixed ... ops)
  { handle_op (args, OP_GT, OP_LEFT); }
  PIKEFUN object ``>(mixed ... ops)
  { handle_op (args, OP_GT, OP_RIGHT); }

  PIKEFUN object `==(mixed ... ops)
  { handle_op (args, OP_EQ, OP_LEFT); }
  PIKEFUN object ``==(mixed ... ops)
  { handle_op (args, OP_EQ, OP_RIGHT); }
#endif

  INIT
  {
    THIS->expr_node = NULL;
  }

  EXIT
  {
    if (THIS->expr_node != NULL)
      THIS->expr_node->SubRef();
  }
}

PIKECLASS ParameterBlock {
  CVAR int param_block_idx;
  CVAR int size;

  PIKEFUN void create (int param_block_idx, int size)
  {
    THIS->param_block_idx = param_block_idx;
    THIS->size = size;
  }

  PIKEFUN object `[](int index)
  {
    if (index < 0 || index >= THIS->size)
      Pike_error ("Index out of range.\n");

    struct object* new_operand = fast_clone_object (Ceres_Operand_program);
    struct Ceres_Operand_struct* new_op_struct =
      (Ceres_Operand_struct*)get_storage (new_operand, Ceres_Operand_program);

    new_op_struct->expr_node =
      new DoubleTreeNode (THIS->param_block_idx, index);

    new_op_struct->expr_node->AddRef();

    RETURN new_operand;
  }

  PIKEFUN int _sizeof()
  {
    push_int (THIS->size);
  }
}

PIKECLASS ResidualBlock {
  CVAR std::vector<DoubleTreeNode*>* expr_trees;
  CVAR int size;

  PIKEFUN void create (int size)
  {
    THIS->size = size;
    THIS->expr_trees->resize (size);
  }

  PIKEFUN object `[]=(int index, int|float|object value)
  {
    if (index < 0 || index >= THIS->size)
      Pike_error ("Index out of range.\n");

    DoubleTreeNode* new_node;
    if (TYPEOF (*value) == T_OBJECT &&
	value->u.object->prog == Ceres_Operand_program) {
      struct object* op = value->u.object;
      struct Ceres_Operand_struct* op_struct =
      (Ceres_Operand_struct*)get_storage (op, Ceres_Operand_program);
      new_node = op_struct->expr_node;
      if (new_node == NULL) {
	throw;
      }
    } else if (TYPEOF (*value) == T_FLOAT) {
      new_node = new DoubleTreeNode (value->u.float_number);
    } else if (TYPEOF (*value) == T_INT) {
      new_node = new DoubleTreeNode (value->u.integer);
    } else {
      SIMPLE_BAD_ARG_ERROR("<operator>", 2, "int|float|Ceres.Operand");
    }

    if (THIS->expr_trees->size() <= (unsigned int)index)
      THIS->expr_trees->resize (index + 1);

    THIS->expr_trees->at (index) = new_node;
    new_node->AddRef();
  }

  INIT
  {
    THIS->expr_trees = new std::vector<DoubleTreeNode*>;
  }

  EXIT
  {
    std::vector<DoubleTreeNode*>* expr_trees = THIS->expr_trees;
    for (auto const &it : *expr_trees) {
      if (it != NULL) {
	DoubleTreeNode* node = it;
	node->SubRef();
      }
    }
    delete expr_trees;
  }
}

PIKECLASS CostFunction {
  PIKEFUN object evaluate()
  {

  }

  void handle_func (INT32 args, FunctionType func_type)
  {
    struct object* new_operand = fast_clone_object (Ceres_Operand_program);
    struct Ceres_Operand_struct* new_op_struct =
      (Ceres_Operand_struct*)get_storage (new_operand, Ceres_Operand_program);

    if (args > 2) Pike_error ("Too many arguments.\n");

    DoubleTreeNode* left_node = NULL;
    DoubleTreeNode* right_node = NULL;

    for (int i = 0; i < args; i++) {
      struct svalue op_sval = Pike_sp[i-args];

      DoubleTreeNode* new_node = NULL;
      if (TYPEOF (op_sval) == T_OBJECT &&
	  op_sval.u.object->prog == Ceres_Operand_program) {
	struct object* op = op_sval.u.object;
	struct Ceres_Operand_struct* op_struct =
	  (Ceres_Operand_struct*)get_storage (op, Ceres_Operand_program);
	new_node = op_struct->expr_node;
	if (new_node == NULL) {
	  new_node = new DoubleTreeNode (op_struct->param_block,
					 op_struct->param_block_index);
	}
      } else if (TYPEOF (op_sval) == T_FLOAT) {
	new_node = new DoubleTreeNode (op_sval.u.float_number);
      } else if (TYPEOF (op_sval) == T_INT) {
	new_node = new DoubleTreeNode (op_sval.u.integer);
      } else {
	SIMPLE_BAD_ARG_ERROR("<operator>", i, "int|float|Ceres.Operand");
      }

      if (i == 0)
	left_node = new_node;
      else if (i == 1)
	right_node = new_node;
    }

    if (right_node != NULL)
      new_op_struct->expr_node = new DoubleTreeNode (func_type, left_node,
						     right_node);
    else
      new_op_struct->expr_node = new DoubleTreeNode (func_type, left_node);

    new_op_struct->expr_node->AddRef();
    pop_n_elems (args);
    push_object (new_operand);
  }

  PIKEFUN object abs   (int|float|object op1)
  { handle_func (args, OP_ABS); }

  PIKEFUN object log   (int|float|object op1)
  { handle_func (args, OP_LOG); }

  PIKEFUN object exp   (int|float|object op1)
  { handle_func (args, OP_EXP); }

  PIKEFUN object sqrt  (int|float|object op1)
  { handle_func (args, OP_SQRT); }

  PIKEFUN object cos   (int|float|object op1)
  { handle_func (args, OP_COS); }

  PIKEFUN object acos  (int|float|object op1)
  { handle_func (args, OP_ACOS); }

  PIKEFUN object sin   (int|float|object op1)
  { handle_func (args, OP_SIN); }

  PIKEFUN object asin  (int|float|object op1)
  { handle_func (args, OP_ASIN); }

  PIKEFUN object tan   (int|float|object op1)
  { handle_func (args, OP_TAN); }

  PIKEFUN object atan  (int|float|object op1)
  { handle_func (args, OP_ATAN); }

  PIKEFUN object sinh  (int|float|object op1)
  { handle_func (args, OP_SINH); }

  PIKEFUN object cosh  (int|float|object op1)
  { handle_func (args, OP_COSH); }

  PIKEFUN object tanh  (int|float|object op1)
  { handle_func (args, OP_TANH); }

  PIKEFUN object pow   (int|float|object op1, int|float|object op2)
  { handle_func (args, OP_POW); }

  PIKEFUN object atan2 (int|float|object op1, int|float|object op2)
  { handle_func (args, OP_ATAN2); }

}

static int is_ceres_cost_function (struct object* o)
{
  struct program* p = o->prog;
  for (INT32 i = p->num_inherits-1; i >= 0; i--) {
    if(p->inherits[i].prog->id == Ceres_CostFunction_program->id)
      return 1;
  }
  return 0;
}

PIKECLASS AutoDiffSolver {
  PIKEFUN array(array(float)) solve (object cost_function,
				     array(array(float)) initial_params,
				     int max_iter)
  {
    if (!is_ceres_cost_function (cost_function))
      SIMPLE_BAD_ARG_ERROR("solve", 1, "Ceres.CostFunction");

    if (initial_params->type_field != BIT_ARRAY)
      SIMPLE_BAD_ARG_ERROR("solve", 2, "array(array(float))");

    std::vector<int32> block_sizes_vect;

    {
      struct svalue tmp_sval;
      mark_free_svalue (&tmp_sval);
      int num_blocks = initial_params->size;
      for (int i = 0; i < num_blocks; i++) {
	array_index(&tmp_sval, initial_params, i);
	if (TYPEOF (tmp_sval) != T_ARRAY ||
	    tmp_sval.u.array->type_field != BIT_FLOAT)
	  SIMPLE_BAD_ARG_ERROR("solve", 2, "array(array(float))");

	push_int (i); // Index of parameter block
	int block_size = tmp_sval.u.array->size;
	push_int (block_size); // Size of parameter block

	push_object (clone_object (Ceres_ParameterBlock_program, 2));
	block_sizes_vect.push_back (block_size);
      }
      f_aggregate (num_blocks);
      free_svalue (&tmp_sval);
    }

    apply (cost_function, "evaluate", 1);

    stack_pop_n_elems_keep_top (args);

    struct svalue res_sval = Pike_sp[-1];

    if (TYPEOF (res_sval) == T_OBJECT &&
	res_sval.u.object->prog == Ceres_ResidualBlock_program) {
      struct object* res_obj = res_sval.u.object;
      struct Ceres_ResidualBlock_struct* res_struct =
      (Ceres_ResidualBlock_struct*)get_storage (res_obj,
						 Ceres_ResidualBlock_program);
      std::vector<DoubleTreeNode*> expr_trees = *res_struct->expr_trees;

      PikeCostFunctor::PikeDynamicCostFunction* cf =
	PikeCostFunctor::Create (block_sizes_vect, expr_trees);

      int num_blocks = block_sizes_vect.size();
      std::vector<double*> param_blocks;
      struct svalue tmp_sval;
      mark_free_svalue (&tmp_sval);
      for (int i = 0; i < initial_params->size; i++) {
	array_index(&tmp_sval, initial_params, i);
	if (TYPEOF (tmp_sval) != T_ARRAY ||
	    tmp_sval.u.array->type_field != BIT_FLOAT)
	  Pike_error ("initial_params must be array(array(float))\n");

	struct array* inner_array = tmp_sval.u.array;
	size_t inner_size = inner_array->size;
	double* new_elems =
	  (double*)malloc (sizeof (double) * inner_size);

	struct svalue float_sval;
	mark_free_svalue (&float_sval);
	for (unsigned int j = 0; j < inner_size; j++) {
	  array_index(&float_sval, inner_array, j);
	  if (TYPEOF (float_sval) != T_FLOAT)
	    throw; // This case should be taken care of by the
		   // type_field check above, so this is just
		   // odd-case-bug paranoia.
	  new_elems[j] = float_sval.u.float_number;
	}
	free_svalue (&float_sval);

	param_blocks.push_back (new_elems);
      }
      free_svalue (&tmp_sval);

      ceres::Problem problem;
      problem.AddResidualBlock (cf, NULL, param_blocks);

      ceres::Solver::Options options;
      options.linear_solver_type = ceres::DENSE_QR;

#ifdef CERES_DEBUG
      options.minimizer_progress_to_stdout = true;
#endif

      options.max_num_iterations = max_iter;
      ceres::Solver::Summary summary;
      ceres::Solve(options, &problem, &summary);

#ifdef CERES_DEBUG
      std::cout << summary.BriefReport() << "\n";
#endif

      for (unsigned int i = 0; i < block_sizes_vect.size(); i++) {
	int block_size = block_sizes_vect[i];
	for (int j = 0; j < block_size; j++)
	  push_float (param_blocks[i][j]);
	f_aggregate (block_size);
      }
      f_aggregate (param_blocks.size());

      for (unsigned int i = 0; i < param_blocks.size(); i++)
	free (param_blocks[i]);
    } else {
      Pike_error ("Evaluate callback must return a ResidualBlock\n.");
    }
  }
}

extern "C" {

static int google_logging_inited = 0;

PIKE_MODULE_INIT
{
  INIT;
  if (!google_logging_inited) {
    google_logging_inited = 1;
    google::InitGoogleLogging("PikeCeres");
  }
}

PIKE_MODULE_EXIT
{
  EXIT;
}
}
